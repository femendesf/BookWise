// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  email     String  @unique
  name      String? @db.Text
  avatarUrl String? @db.Text

  createdAt DateTime @default(now())

  totalBookRead   Int?
  lastSyncedBooks DateTime?

  hasGoogleBooksPermission Boolean @default(false)

  account Account[]
  reviews Review[] // Adicionado: Um usuário pode ter várias avaliações
  session Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @db.Text
  accessToken       String? @db.Text
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String? @db.Text
  sessionState      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Book {
  id          String   @id @default(uuid())
  bookId      String
  title       String   @db.Text
  author      String   @db.Text
  coverUrl    String   @db.Text
  description String?  @db.Text
  sinopse     String?  @db.Text
  pages       Int?
  category    String? // Mudado para String? ou String
  rating      Float?
  reviews     Review[]

  @@map("books")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  bookId    String
  rating    Float
  comment   String?  @db.Text
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("reviews")
}
